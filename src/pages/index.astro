---
import Layout from '../layouts/Layout.astro';
---

<Layout title='Jak brzmi ciało?'>
  <main class='bg-gradient-to-b from-purple-200 to-pink-200 min-h-screen p-8'>
    <h1 class='text-4xl md:text-6xl font-bold text-center text-purple-600 mb-8'>
      Jak to brzmi? 🎵
    </h1>

    <div class='grid grid-cols-2 md:grid-cols-3 gap-6 max-w-3xl mx-auto'>
      <button
        data-sound='cat'
        class='sound-button bg-yellow-400 hover:bg-yellow-500'
      >
        <span class='text-6xl mb-2'>🐱</span>
        <span class='text-xl font-bold'>Meow!</span>
      </button>

      <button
        data-sound='dog'
        class='sound-button bg-blue-400 hover:bg-blue-500'
      >
        <span class='text-6xl mb-2'>🐶</span>
        <span class='text-xl font-bold'>Woof!</span>
      </button>

      <button
        data-sound='bird'
        class='sound-button bg-green-400 hover:bg-green-500'
      >
        <span class='text-6xl mb-2'>🐦</span>
        <span class='text-xl font-bold'>Tweet!</span>
      </button>

      <button
        data-sound='duck'
        class='sound-button bg-red-400 hover:bg-red-500'
      >
        <span class='text-6xl mb-2'>🦆</span>
        <span class='text-xl font-bold'>Quack!</span>
      </button>
    </div>

    <!-- Play/Stop Controls -->
    <div class='flex justify-center gap-4 mt-8'>
      <button id='stop' class='control-button bg-red-500 hover:bg-red-600'>
        Stop 🛑
      </button>
    </div>
  </main>
</Layout>

<style>
  .sound-button {
    @apply rounded-2xl p-6 text-white shadow-lg transform transition-transform duration-200 hover:scale-105;
  }

  .control-button {
    @apply rounded-full px-8 py-4 text-white text-xl font-bold shadow-lg transform transition-transform duration-200 hover:scale-105;
  }

  .playing {
    @apply ring-4 ring-purple-600;
  }
</style>

<script>
  // Audio elements will be initialized here
  const SOUNDS = Object.freeze({
    cat: new Audio('/sounds/cat.mp3'),
    dog: new Audio('/sounds/dog.mp3'),
    bird: new Audio('/sounds/bird.mp3'),
    duck: new Audio('/sounds/duck.mp3'),
  });

  const soundControls = (() => {
    let currentlyPlaying: keyof typeof SOUNDS | null = null;
    let currentButton: HTMLButtonElement | null = null;

    const playSound = (
      soundKey: keyof typeof SOUNDS,
      button: HTMLButtonElement
    ) => {
      const isCurrentlySoundPressed = soundKey === currentlyPlaying;
      if (isCurrentlySoundPressed) {
        stopCurrentSound();
        return;
      }
	  
      stopCurrentSound();

      const sound = SOUNDS[soundKey];
      sound.currentTime = 0;
      sound.loop = true;
      sound.play();
      currentlyPlaying = soundKey;
      currentButton = button;
      button.classList.add('playing');
    };

    const stopCurrentSound = () => {
      if (!currentlyPlaying) {
        return;
      }
      SOUNDS[currentlyPlaying].pause();
      SOUNDS[currentlyPlaying].currentTime = 0;
      currentButton?.classList.remove('playing');
      currentlyPlaying = null;
      currentButton = null;
    };

    return {
      playSound,
      stopCurrentSound,
    };
  })();

  const { playSound, stopCurrentSound } = soundControls;

  const stopButton = document.getElementById('stop');
  const soundButtons =
    document.querySelectorAll<HTMLButtonElement>('.sound-button');

  soundButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const soundKey = button.dataset.sound as keyof typeof SOUNDS;
      playSound(soundKey, button);
    });
  });

  stopButton?.addEventListener('click', stopCurrentSound);
</script>
